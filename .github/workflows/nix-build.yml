name: "Parse and Build Nix Files"

on:
    workflow_call:

permissions:
    contents: read

jobs:
  parse:
    name: Parse
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Run nix-instantiate
        run: |
          set -euo pipefail

          failures=0

          for cfg in $(git ls-files '*.nix'); do
            if nix-instantiate --parse $cfg > /dev/null; then
              echo "  ✓ $cfg"
            else
              echo "  ✗ $cfg"
              failures=$((failures+1))
            fi
          done

          if [ "$failures" -ne 0 ]; then
            echo -e "\n❌ $failures files failed parsing."
            exit 1
          else
            echo -e "\n✅ All files parsed successfully!"
          fi

  check-current:
    name: Check with current flakes
    needs: [ parse ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run nix flake check
        env:
          NIX_CONFIG: "experimental-features = nix-command flakes"
        run: |
          set -euo pipefail

          failures=0

          for cfg in $(git ls-files '*/flake.nix'); do
            echo -e "\n→ Checking $cfg"

            flakeDir=$(dirname "$cfg")

            if nix flake check "./$flakeDir" --quiet --no-update-lock-file >/dev/null; then
              echo "  ✓ $cfg"
            else
              echo "  ✗ $cfg"
              failures=$((failures+1))
            fi
          done

          if [ "$failures" -ne 0 ]; then
            echo -e "\n❌ $failures flake(s) failed validation."
            exit 1
          else
            echo -e "\n✅ All flakes passed!"
          fi

  check-updated:
    name: Check with updated flakes
    needs: [ parse ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run nix flake check
        env:
          NIX_CONFIG: "experimental-features = nix-command flakes"
        run: |
          set -euo pipefail

          failures=0

          for cfg in $(git ls-files '*/flake.nix'); do
            echo -e "\n→ Checking $cfg"

            flakeDir=$(dirname "$cfg")

            if nix flake check "./$flakeDir" --quiet >/dev/null; then
              echo "  ✓ $cfg"
            else
              echo "  ✗ $cfg"
              failures=$((failures+1))
            fi
            git restore .
            git clean -fdx
          done

          if [ "$failures" -ne 0 ]; then
            echo -e "\n❌ $failures flake(s) failed validation."
            exit 1
          else
            echo -e "\n✅ All flakes passed!"
          fi

#   build-current:
#     name: Build with current flakes
#     needs: [ check-current ]
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Install Nix
#         uses: cachix/install-nix-action@v31
#         with:
#           nix_path: nixpkgs=channel:nixos-unstable

#       - name: Install jq
#         run: sudo apt-get update && sudo apt-get install -y jq

#       - name: Run nix flake check
#         env:
#           NIX_CONFIG: "experimental-features = nix-command flakes"
#         run: |
#           set -euo pipefail

#           failures=0

#           for cfg in $(git ls-files '*/flake.nix'); do
#             echo -e "\n→ Building $cfg"
            
#             flakeDir=$(dirname "$cfg")
            
#             hosts=$(nix eval "./$flakeDir"#nixosConfigurations --apply 'x: builtins.concatStringsSep "\n" (builtins.attrNames x)' --raw 2>/dev/null)
            
#             if [ -z "$hosts" ]; then
#               echo "  $cfg does not provide any NixOS configurations"
#               continue
#             fi
            
#             for host in $hosts; do
#               echo -e "\n  → Building $flakeDir#$host"
#               conf="./${flakeDir}#nixosConfigurations.${host}.config.system.build.toplevel"
#               if nix build "$conf" >/dev/null; then
#                 echo "    ✓ $flakeDir#$host"
#               else
#                 echo "    ✗ $flakeDir#$host"
#                 failures=$((failures+1))
#               fi
#             done
#           done

#           if [ "$failures" -ne 0 ]; then
#             echo -e "\n❌ $failures flake(s) failed to build."
#             exit 1
#           else
#             echo -e "\n✅ All flakes passed!"
#           fi

#   build-updated:
#     name: Build with updated flakes
#     needs: [ check-updated ]
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Install Nix
#         uses: cachix/install-nix-action@v31
#         with:
#           nix_path: nixpkgs=channel:nixos-unstable

#       - name: Install jq
#         run: sudo apt-get update && sudo apt-get install -y jq

#       - name: Run nix flake check
#         env:
#           NIX_CONFIG: "experimental-features = nix-command flakes"
#         run: |
#           set -euo pipefail

#           failures=0

#           for cfg in $(git ls-files '*/flake.nix'); do
#             echo -e "\n→ Building $cfg"
            
#             flakeDir=$(dirname "$cfg")
            
#             hosts=$(nix eval "./$flakeDir"#nixosConfigurations --apply 'x: builtins.concatStringsSep "\n" (builtins.attrNames x)' --raw 2>/dev/null)
            
#             if [ -z "$hosts" ]; then
#               echo "  $cfg does not provide any NixOS configurations"
#               continue
#             fi

#             nix flake update "./$flakeDir"
            
#             for host in $hosts; do
#               echo -e "\n  → Building $flakeDir#$host"
#               conf="./${flakeDir}#nixosConfigurations.${host}.config.system.build.toplevel"
#               if nix build "$conf" >/dev/null; then
#                 echo "    ✓ $flakeDir#$host"
#               else
#                 echo "    ✗ $flakeDir#$host"
#                 failures=$((failures+1))
#               fi
#             done
#           done

#           if [ "$failures" -ne 0 ]; then
#             echo -e "\n❌ $failures flake(s) failed to build."
#             exit 1
#           else
#             echo -e "\n✅ All flakes passed!"
#           fi